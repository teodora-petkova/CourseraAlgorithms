See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (2 warnings)
PMD:          FAILED (11 warnings)
Checkstyle:   FAILED (0 errors, 2 warnings)

Correctness:  10/36 tests passed
Memory:       4/4 tests passed
Timing:       29/27 tests passed

Aggregate score: 58.15%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 343 Jul 21 17:13 Outcast.java
4.8K Jul 21 17:13 SAP.java
 889 Jul 21 17:13 WordNet.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac11 SAP.java
*-----------------------------------------------------------

% javac11 WordNet.java
*-----------------------------------------------------------

% javac11 Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L D NS_NON_SHORT_CIRCUIT NS: Questionable use of a non-short-circuit logic operator ('&' or '|'). Did you mean to use '&&' or '||' instead?  At SAP.java:[line 114]
L D NS_NON_SHORT_CIRCUIT NS: Questionable use of a non-short-circuit logic operator ('&' or '|'). Did you mean to use '&&' or '||' instead?  At SAP.java:[line 127]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
Outcast.java:3: Avoid unused parameter variables, such as 'wordnet'. [UnusedFormalParameter]
Outcast.java:13: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
SAP.java:13: Unnecessary use of fully qualified name 'java.lang.IllegalArgumentException' due to existing implicit import 'java.lang.*'. [UnnecessaryFullyQualifiedName]
SAP.java:115: Unnecessary use of fully qualified name 'java.lang.IllegalArgumentException' due to existing implicit import 'java.lang.*'. [UnnecessaryFullyQualifiedName]
SAP.java:128: Unnecessary use of fully qualified name 'java.lang.IllegalArgumentException' due to existing implicit import 'java.lang.*'. [UnnecessaryFullyQualifiedName]
SAP.java:139: Unnecessary use of fully qualified name 'java.lang.IllegalArgumentException' due to existing implicit import 'java.lang.*'. [UnnecessaryFullyQualifiedName]
SAP.java:148: Unnecessary use of fully qualified name 'java.lang.IllegalArgumentException' due to existing implicit import 'java.lang.*'. [UnnecessaryFullyQualifiedName]
SAP.java:154: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
WordNet.java:6: Avoid unused parameter variables, such as 'hypernyms'. [UnusedFormalParameter]
WordNet.java:6: Avoid unused parameter variables, such as 'synsets'. [UnusedFormalParameter]
WordNet.java:39: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 11 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] SAP.java:3:8: Unused import statement for 'edu.princeton.cs.algs4.StdOut'. [UnusedImports]
[WARN] SAP.java:44:72: ')' is preceded with whitespace. [ParenPad]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for SAP.java
*-----------------------------------------------------------

% custom checkstyle checks for WordNet.java
*-----------------------------------------------------------
[INFO] WordNet.java:1: The program uses neither 'DirectedCycle' nor 'Topological' to check whether the digraph is a DAG. [Design]

% custom checkstyle checks for Outcast.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 20 total tests.

Test 1: check length() and ancestor() on fixed digraphs
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph9.txt
==> passed

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
    - failed on trial 6 of 100
    - v = 64451, w = 25327
    - student   length() = 16
    - reference length() = 15

==> FAILED

Test 3: check length() and ancestor() on directed paths
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 4: check length() and ancestor() on directed cycles
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 5: check length() and ancestor() on complete graphs
  * 5
    - failed on trial 1 of 25
    - v = 3, w = 0
    - student   length() = 2
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 1, w = 4
    - student   length() = 2
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 17, w = 16
    - student   length() = 2
    - reference length() = 1

  * 50
    - failed on trial 1 of 2500
    - v = 30, w = 20
    - student   length() = 2
    - reference length() = 1

==> FAILED

Test 6: check length() and ancestor() on tournament digraphs
  * 5
    - failed on trial 17 of 25
    - v = 2, w = 1
    - student   length() = 2
    - reference length() = 1

  * 10
    - failed on trial 1 of 100
    - v = 0, w = 6
    - student   length() = 2
    - reference length() = 1

  * 20
    - failed on trial 1 of 400
    - v = 5, w = 2
    - student   length() = 6
    - reference length() = 1

  * 50
    - failed on trial 1 of 2500
    - v = 44, w = 42
    - student   length() = 2
    - reference length() = 1

==> FAILED

Test 7: check length() and ancestor() on complete binary trees
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
    - failed on trial 7 of 25
    - v = 3, w = 4
    - student   length() = 2
    - reference length() = 1

    - failed on trial 3 of 100

  * 10 vertices, 40 edges
    - failed on trial 2 of 100
    - v = 1, w = 7
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 1 of 400
    - v = 17, w = 11
    - student   length() = 3
    - reference length() = 2

    - failed on trial 1 of 100

==> FAILED

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
    - failed on trial 5 of 25
    - v = 3, w = 2
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 6 of 100
    - v = 3, w = 4
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 2 of 400
    - v = 12, w = 2
    - student   length() = 3
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
    - failed on trial 2 of 25
    - v = 2, w = 0
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 10 vertices, 40 edges
    - failed on trial 2 of 100
    - v = 9, w = 7
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 2 of 400
    - v = 3, w = 16
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

==> FAILED

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
    - failed on trial 1 of 25
    - v = 0, w = 4
    - student   length() = 3
    - reference length() = 2

    - failed on trial 2 of 100

  * 10 vertices, 40 edges
    - failed on trial 3 of 100
    - v = 5, w = 0
    - student   length() = 2
    - reference length() = 1

    - failed on trial 1 of 100

  * 20 vertices, 100 edges
    - failed on trial 3 of 400
    - v = 15, w = 9
    - student   length() = 3
    - reference length() = 2

    - failed on trial 1 of 100

==> FAILED

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
  * digraph3.txt and digraph4.txt
  * digraph5.txt and digraph6.txt
  * digraph2.txt and digraph1.txt
==> passed

Test 15: check whether SAP is immutable
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph-ambiguous-ancestor.txt
==> passed

Test 16: check length() and ancestor() with iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 12539 }
    - w = { 70522 }
    - student   length   = -1
    - reference length   = 10
    - student   ancestor = -1
    - reference ancestor = 60600

  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 19241 }
    - w = { 56142, 59162 }
    - student   length   = -1
    - reference length   = 9
    - student   ancestor = -1
    - reference ancestor = 81004

  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 31152, 37554 }
    - w = { 72834 }
    - student   length   = -1
    - reference length   = 11
    - student   ancestor = -1
    - reference ancestor = 38003

  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 9958, 63510 }
    - w = { 4298, 62815 }
    - student   length   = -1
    - reference length   = 10
    - student   ancestor = -1
    - reference ancestor = 19171

  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 21160, 37008, 41143 }
    - w = { 8037, 20092, 20626, 27515, 43088, 45468, 52602, 60599, 63449, 72502, 72859 }
    - student   length   = -1
    - reference length   = 10
    - student   ancestor = -1
    - reference ancestor = 18840

  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = { 613, 4080, 18982, 25978, 34010, 48889, 50714, 52092, 62612, 76156, 77435 }
    - w = { 6004, 26106, 68043 }
    - student   length   = -1
    - reference length   = 5
    - student   ancestor = -1
    - reference ancestor = 42539

==> FAILED

Test 17: check length() and ancestor() with zero-length iterable arguments
  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
==> passed

Test 18: check length() and ancestor() with invalid arguments
  * G = digraph1.txt v = -1, w = 0
  * G = digraph1.txt v = 0, w = -1
  * G = digraph1.txt v = 13, w = 0
    - throws the wrong exception when calling length() with an invalid argument
    - length() throws a java.lang.ArrayIndexOutOfBoundsException
    - length should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with an invalid argument
    - ancestor() throws a java.lang.ArrayIndexOutOfBoundsException
    - ancestor() should throw a java.lang.IllegalArgumentException

  * G = digraph1.txt v = 0, w = 13
    - throws the wrong exception when calling length() with an invalid argument
    - length() throws a java.lang.ArrayIndexOutOfBoundsException
    - length should throw a java.lang.IllegalArgumentException

    - throws the wrong exception when calling ancestor() with an invalid argument
    - ancestor() throws a java.lang.ArrayIndexOutOfBoundsException
    - ancestor() should throw a java.lang.IllegalArgumentException

==> FAILED

Test 19: check iterable versions of length() and ancestor() with invalid arguments
  * G = digraph1.txt, v = { 0, 5, 6, 8, 11 }, w = null
  * G = digraph1.txt, v = null, w = { 1, 2, 3, 7, 10, 12 }
  * G = digraph1.txt, v = null, w = null
  * G = digraph1.txt, v = { 0, 5, 6, 8, 11, -1 }, w = { 1, 2, 3, 7, 10, 12 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 0, 5, 6, 8, 11 }, w = { 1, -1, 2, 3, 7, 10, 12 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 0, 5, 6, 8, 13, 11 }, w = { 1, 2, 3, 7, 10, 12 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 0, 5, 6, 8, 11 }, w = { 1, 2, 3, 7, 13, 10, 12 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 0, 5, null, 6, 8, 11 }, w = { 1, 2, 3, 7, 10, 12 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

  * G = digraph1.txt, v = { 0, 5, 6, 8, 11 }, w = { 1, 2, null, 3, 7, 10, 12 }
    - fails to throw an exception when calling length() with invalid argument

    - fails to throw an exception when calling ancestor() with invalid argument

==> FAILED

Test 20: random calls to both version of length() and ancestor(),
         with probabilities p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)

    java.lang.IllegalArgumentException: vertex -1 is not between 0 and 19

    edu.princeton.cs.algs4.BreadthFirstDirectedPaths226.validateVertex(BreadthFirstDirectedPaths226.java:115)
    edu.princeton.cs.algs4.BreadthFirstDirectedPaths226.distTo(BreadthFirstDirectedPaths226.java:88)
    TestSAP.random(TestSAP.java:1137)
    TestSAP.randomRootedInDAG(TestSAP.java:1187)
    TestSAP.test20(TestSAP.java:1218)
    TestSAP.main(TestSAP.java:1311)

  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)

    java.lang.IllegalArgumentException: vertex -1 is not between 0 and 19

    edu.princeton.cs.algs4.BreadthFirstDirectedPaths226.validateVertex(BreadthFirstDirectedPaths226.java:115)
    edu.princeton.cs.algs4.BreadthFirstDirectedPaths226.distTo(BreadthFirstDirectedPaths226.java:88)
    TestSAP.random(TestSAP.java:1137)
    TestSAP.randomSimple(TestSAP.java:1201)
    TestSAP.test20(TestSAP.java:1219)
    TestSAP.main(TestSAP.java:1311)

==> FAILED


Total: 9/20 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on pair 1 of 1000
    - nounA = golden_pothos
    - nounB = family_Aceraceae
    - student   distance() = -1
    - reference distance() = 17

==> FAILED

Test 2: check distance() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1

  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1

  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
    - failed on pair 1
    - nounA = a
    - nounB = b
    - student   distance() = -1
    - reference distance() = 1

==> FAILED

Test 3: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - failed on pair 1 of 1000
    - nounA = beta_globulin
    - nounB = unit
    - student   distance() = -1
    - reference distance() = 6

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - failed on pair 1 of 1000
    - nounA = lubricating_oil
    - nounB = tetanus_antitoxin
    - student   distance() = -1
    - reference distance() = 7

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - failed on pair 1 of 1000
    - nounA = jawbone
    - nounB = Purkinje_network
    - student   distance() = -1
    - reference distance() = 7

==> FAILED

Test 4: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - student returns invalid synset on pair 1 of 1000
    - nounA = Bellis_perennis
    - nounB = tolu_balsam
    - student   distance() = -1
    - reference distance() = 20
    - student   sap() = ''
    - reference sap() = 'physical_entity'

==> FAILED

Test 5: check sap() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - student returns invalid synset on pair 1 of 15
    - nounA = a
    - nounB = a
    - student   distance() = -1
    - reference distance() = 0
    - student   sap() = ''
    - reference sap() = 'a'

  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
    - student returns invalid synset on pair 1 of 15
    - nounA = a
    - nounB = a
    - student   distance() = -1
    - reference distance() = 0
    - student   sap() = ''
    - reference sap() = 'a'

  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
    - student returns invalid synset on pair 1 of 6
    - nounA = a
    - nounB = a
    - student   distance() = -1
    - reference distance() = 0
    - student   sap() = ''
    - reference sap() = 'a'

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
    - student returns invalid synset on pair 1 of 11
    - nounA = a
    - nounB = a
    - student   distance() = -1
    - reference distance() = 0
    - student   sap() = ''
    - reference sap() = 'a'

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - student returns invalid synset on pair 1 of 8
    - nounA = a
    - nounB = a
    - student   distance() = -1
    - reference distance() = 0
    - student   sap() = ''
    - reference sap() = 'a'

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
    - student returns invalid synset on pair 1 of 8
    - nounA = a
    - nounB = a
    - student   distance() = -1
    - reference distance() = 0
    - student   sap() = ''
    - reference sap() = 'a'

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
    - student returns invalid synset on pair 1 of 11
    - nounA = a
    - nounB = a
    - student   distance() = -1
    - reference distance() = 0
    - student   sap() = ''
    - reference sap() = 'a'

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
    - student returns invalid synset on pair 1 of 8
    - nounA = a
    - nounB = a
    - student   distance() = -1
    - reference distance() = 0
    - student   sap() = ''
    - reference sap() = 'a'

==> FAILED

Test 6: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - student returns invalid synset on pair 1 of 1000
    - nounA = iodinated_protein
    - nounB = iodinated_protein
    - student   distance() = -1
    - reference distance() = 0
    - student   sap() = ''
    - reference sap() = 'iodoprotein iodinated_protein'

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - student returns invalid synset on pair 1 of 1000
    - nounA = cluster_of_differentiation_4
    - nounB = dandruff
    - student   distance() = -1
    - reference distance() = 12
    - student   sap() = ''
    - reference sap() = 'thing'

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - student returns invalid synset on pair 1 of 1000
    - nounA = mons_veneris
    - nounB = female_reproductive_system
    - student   distance() = -1
    - reference distance() = 7
    - student   sap() = ''
    - reference sap() = 'body_part'

==> FAILED

Test 7: check whether WordNet is immutable
  * synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 8: check constructor when input is not a rooted DAG
  * synsets3.txt, hypernyms3InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets3.txt, hypernyms3InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle+Path.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 9: check isNoun()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on trial 1
    - noun               = anamorphosis
    - student   isNoun() = false
    - reference isNoun() = true

  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - failed on trial 1
    - noun               = a
    - student   isNoun() = false
    - reference isNoun() = true

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - failed on trial 1
    - noun               = a
    - student   isNoun() = false
    - reference isNoun() = true

==> FAILED

Test 10: check nouns()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 119188
    - 119188 missing entries in student solution, including:
      'zymurgy'

  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including:
      'o'

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 8
    - 8 missing entries in student solution, including:
      'h'

==> FAILED

Test 11: check whether two WordNet objects can be created at the same time
  * synsets1 = synsets15.txt; hypernyms1 = hypernyms15Tree.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
    - noun               = a
    - student1   isNoun() = false
    - reference1 isNoun() = true

  * synsets1 = synsets.txt; hypernyms1 = hypernyms.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
    - noun               = anamorphosis
    - student1   isNoun() = false
    - reference1 isNoun() = true

==> FAILED

Test 12: call distance() and sap() with invalid arguments
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "b"
    - distance("x", "b") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", "b") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "b", nounB = "x"
    - distance("b", "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("b", "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "a"
    - distance("x", "a") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", "a") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "x"
    - distance("x", "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "a", nounB = null
    - distance("a", null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("a", null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "a"
    - distance(null, "a") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap(null, "a") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = null
    - distance(null, null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap(null, null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = null
    - distance("x", null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap("x", null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "x"
    - distance(null, "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

    - sap(null, "x") fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 13: call isNoun() with a null argument
  * synsets15.txt, hypernyms15Path.txt
    - isNoun(null) fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==> FAILED

Test 14: random calls to isNoun(), distance(), and sap(), with
         probabilities p1, p2, and p3, respectively
  * 100 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0)
    - failed on call 2 to distance()
    - nounA = parsnip
    - nounB = school_newspaper
    - student   distance() = -1
    - reference distance() = 12

  * 100 random calls (p1 = 0.5, p2 = 0.0, p3 = 0.5)
    - student returns invalid synset on pair 1 of 100
    - nounA = amino_resin
    - nounB = left-handedness
    - student   distance() = -1
    - reference distance() = 10
    - student   sap() = ''
    - reference sap() = 'entity'

    - failed on call 1 to sap()
  * 100 random calls (p1 = 0.0, p2 = 0.5, p3 = 0.5)
    - failed on call 1 to distance()
    - nounA = roustabout
    - nounB = Lydia_Kamekeha_Paki_Liliuokalani
    - student   distance() = -1
    - reference distance() = 10

  * 100 random calls (p1 = 0.2, p2 = 0.4, p3 = 0.4)
    - student returns invalid synset on pair 1 of 100
    - nounA = inhaler
    - nounB = shattering
    - student   distance() = -1
    - reference distance() = 17
    - student   sap() = ''
    - reference sap() = 'entity'

    - failed on call 1 to sap()
==> FAILED


Total: 1/14 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = 
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = 
    - reference outcast() = Mickey_Mouse

  * outcast4.txt
    - nouns = [probability, statistics, mathematics, physics]
    - student   outcast() = 
    - reference outcast() = probability

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = 
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = 
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = 
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = 
    - reference outcast() = bed

  * outcast8a.txt
    - nouns = [Banti's_disease, hyperadrenalism, German_measles, gargoylism, Q_fever, amebiosis, anthrax, playboy]
    - student   outcast() = 
    - reference outcast() = playboy

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = 
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast9a.txt
    - nouns = [hair, eyes, arm, mouth, nose, ear, cheek, brow, chin]
    - student   outcast() = 
    - reference outcast() = eyes

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = 
    - reference outcast() = albatross

  * outcast10a.txt
    - nouns = [blue, green, yellow, brown, black, white, orange, violet, red, serendipity]
    - student   outcast() = 
    - reference outcast() = serendipity

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = 
    - reference outcast() = potato

  * outcast12.txt
    - nouns = [Dylan, folk, Guthrie, idol, Minneapolis, music, musical, playing, public, recognition, review, thunderbird]
    - student   outcast() = 
    - reference outcast() = Minneapolis

  * outcast12a.txt
    - nouns = [competition, cup, event, fielding, football, level, practice, prestige, team, tournament, world, mongoose]
    - student   outcast() = 
    - reference outcast() = mongoose

  * outcast17.txt
    - nouns = [art, canvas, china, culture, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = 
    - reference outcast() = particularism

  * outcast20.txt
    - nouns = [art, Buddha, Buddhism, canvas, china, culture, India, kingdom, particularism, point, portable, ritual, road, script, sculpture, silk, style, transmission, wall, toluene]
    - student   outcast() = 
    - reference outcast() = particularism

  * outcast29.txt
    - nouns = [acorn, application, assembly, award, basic, cad, code, computer, custom, depth, development, finish, hardware, instruction, language, machine, model, operation, processor, project, silicon, simulation, software, speed, support, team, technology, test, mosque]
    - student   outcast() = 
    - reference outcast() = acorn

==> FAILED

Test 2: check outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)
  * outcast2.txt
    - nouns = [Turing, von_Neumann]
    - student   outcast() = 
    - reference outcast() = Turing

  * outcast3.txt
    - nouns = [Turing, von_Neumann, Mickey_Mouse]
    - student   outcast() = 
    - reference outcast() = Mickey_Mouse

  * outcast5.txt
    - nouns = [horse, zebra, cat, bear, table]
    - student   outcast() = 
    - reference outcast() = table

  * outcast5a.txt
    - nouns = [earth, fire, air, water, heart]
    - student   outcast() = 
    - reference outcast() = heart

  * outcast7.txt
    - nouns = [Asia, Australia, North_America, India, Europe, Antarctica, South_America]
    - student   outcast() = 
    - reference outcast() = India

  * outcast8.txt
    - nouns = [water, soda, bed, orange_juice, milk, apple_juice, tea, coffee]
    - student   outcast() = 
    - reference outcast() = bed

  * outcast8b.txt
    - nouns = [apple, orange, banana, grape, strawberry, cabbage, mango, watermelon]
    - student   outcast() = 
    - reference outcast() = cabbage

  * outcast8c.txt
    - nouns = [car, auto, truck, plane, tree, train, vehicle, van]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast9.txt
    - nouns = [lumber, wood, tree, leaf, nail, house, building, edifice, structure]
    - student   outcast() = 
    - reference outcast() = tree

  * outcast10.txt
    - nouns = [cat, cheetah, dog, wolf, albatross, horse, zebra, lemur, orangutan, chimpanzee]
    - student   outcast() = 
    - reference outcast() = albatross

  * outcast11.txt
    - nouns = [apple, pear, peach, banana, lime, lemon, blueberry, strawberry, mango, watermelon, potato]
    - student   outcast() = 
    - reference outcast() = potato

==> FAILED


Total: 0/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

digraph G             = digraph-wordnet.txt
vertices in G         = 82192
edges    in G         = 84505
student     memory    = 8347912 bytes
reference   memory    = 10320408 bytes
ratio                 = 0.81
maximum allowed ratio = 2.50

Total: 1/1 tests passed!


================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: check memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - number of vertices in digraph = 1000
    - number of edges    in digraph = 1008
    - student   memory              = 16 bytes
    - reference memory              = 1441648 bytes
    - student / reference ratio     = 0.0
    - maximum allowed rato          = 2.0

==> passed

Test 1b: check memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - number of vertices in digraph = 5000
    - number of edges    in digraph = 5059
    - student   memory              = 16 bytes
    - reference memory              = 7041792 bytes
    - student / reference ratio     = 0.0
    - maximum allowed rato          = 2.0

==> passed

Test 1c: check memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - number of vertices in digraph = 10000
    - number of edges    in digraph = 10087
    - student   memory              = 16 bytes
    - reference memory              = 16171880 bytes
    - student / reference ratio     = 0.0
    - maximum allowed rato          = 2.0

==> passed

Total: 3/3 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 14 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
      -  student solution time =  0.01 seconds
      -  maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second: 1131968.00
     -  student   solution calls per second:    2586.00
     -  reference / student ratio:               437.73

=> passed      student <= 50000x reference
=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference

Test 3a-c: time length() and ancestor() with random subsets of 5 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  281406.00
     -  student   solution calls per second: 2229398.00
     -  reference / student ratio:                 0.13

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference
=> BONUS       student <=    10x reference
=> BONUS       student <=     2x reference
=> BONUS       student <=   0.5x reference

Test 4a-c: time length() and ancestor() with random subsets of 100 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:   14531.00
     -  student   solution calls per second:  106894.00
     -  reference / student ratio:                 0.14

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference
=> BONUS       student <=     2x reference
=> BONUS       student <=   0.5x reference

Test 5: Time 10 calls to length() and ancestor() on random path graphs
        (must handle V = 65536 in under 2 seconds)

             V  seconds
        ---------------
         65536     0.11
==> passed


Total: 19/14 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check that exactly two In object created
        (one for synsets file and one for hypernyms file)
    - student   In construct calls = 0
    - reference In construct calls = 2
    - minimum required             = 2
    - maximum allowed              = 2

==> FAILED

Test 2: count number of SAP operations when constructing a WordNet object
        and calling distance() and sap() three times each
  * calls to constructor = 0
    - minimum required   = 1
    - maximum allowed    = 1

  * calls to length()    = 0
    - minimum required   = 3
    - maximum allowed    = 6

  * calls to ancestor()  = 0
    - minimum required   = 3
    - maximum allowed    = 6

==> FAILED

Test 3: count Digraph operations during WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * number of synsets    = 82192
  * number of hypernyms  = 84505
  * calls to constructor = 0
    - minimum required  = 1
    - maximum allowed   = 2

  * calls to addEdge()   = 0
    - the constructor should call addEdge() once per WordNet edge

  * calls to adj()       = 0
  * calls to outdegree() = 0
  * calls to indegree()  = 0
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> FAILED

Test 4: count Digraph operations during 1000 calls each
        to distance() and sap()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * calls to constructor = 0
  * calls to addEdge()   = 0
  * calls to adj()       = 0
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> passed

Test 5: time WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - student constructor time =  0.00 seconds
    - maximum allowed     time = 10.00 seconds

==> passed

Test 6a-e: time sap() and distance() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  292792.00
    - student   solution calls per second: 1562455.25
    - reference / student ratio:                 0.19

=> passed    student <= 10000x reference
=> passed    student <=  1000x reference
=> passed    student <=   100x reference
=> passed    student <=    10x reference
=> passed    student <=     5x reference
=> BONUS     student <=   0.5x reference

Test 7: time isNoun() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second: 1250452.00
    - student   solution calls per second: 1635493.00
    - reference / student ratio:                 0.76
    - allowed ratio:                             4.00
==> passed

Total: 9/11 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP and WordNet)
********************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: count calls to methods in WordNet
 * outcast4.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 6
    - maximum allowed             = 16

 * outcast10.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 45
    - maximum allowed             = 100

 * outcast29.txt
    - student   distance() calls  = 0
    - reference distance() calls  = 406
    - maximum allowed             = 841

==> FAILED

Test 2: timing calls to outcast() for various outcast files

Total time must not exceed 1.0 seconds.

    filename       n     time
-----------------------------
   outcast4.txt    4     0.00
   outcast5.txt    5     0.00
  outcast5a.txt    5     0.00
   outcast5.txt    5     0.00
   outcast7.txt    7     0.00
   outcast8.txt    8     0.00
  outcast8a.txt    8     0.00
  outcast8b.txt    8     0.00
  outcast8c.txt    8     0.00
   outcast9.txt    9     0.00
  outcast9a.txt    9     0.00
  outcast10.txt   10     0.00
 outcast10a.txt   10     0.00
  outcast11.txt   11     0.00
  outcast12.txt   12     0.00
 outcast12a.txt   12     0.00
  outcast20.txt   20     0.00
  outcast29.txt   29     0.00

Total elapsed time: 0.00 seconds

==> passed


Total: 1/2 tests passed!


================================================================

